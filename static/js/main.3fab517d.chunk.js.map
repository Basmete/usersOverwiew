{"version":3,"sources":["components/login-window/index.js","components/login-window/login-window.js","components/users-table/index.js","components/users-table/users-table.js","components/search-panel/index.js","components/search-panel/search-panel.js","components/app/index.js","components/app/app.jsx","serviceWorker.js","index.js"],"names":["LoginWindow","props","state","username","password","isLoginFailed","e","target","type","this","setState","value","axios","post","loginResponse","status","token","data","saveToken","closeLogin","isErrLogin","className","onChange","inputHandler","onClick","login","React","Component","UsersTable","sortColumn","handleSortColumn","bind","sortType","sort","a","b","x","y","charCodeAt","loading","setTimeout","console","log","formatData","getData","map","user","isActive","is_active","isSuperuser","is_superuser","lastLogin","last_login","substr","height","onSortColumn","onRowClick","rowHeight","wordWrap","verticalAlign","width","sortable","resizable","align","dataKey","SearchPanel","search","update","htmlFor","id","placeholder","updateSearch","App","loginEnd","usersArray","query","updateSearchQuery","getDataFromAPI","Axios","get","headers","Authorization","filter","toLowerCase","indexOf","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3fab517d.chunk.js","sourcesContent":["import LoginWindow from './login-window';\r\n\r\nexport default LoginWindow;","import React from \"react\";\r\nimport \"./login-window.scss\";\r\nimport axios from \"axios\";\r\n\r\nclass LoginWindow extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: \"test_super\",\r\n      password: \"Nf<U4f<rDbtDxAPn\",\r\n      isLoginFailed: true\r\n    };\r\n  }\r\n\r\n  inputHandler(e) {\r\n    if (e.target.type === \"text\") {\r\n      this.setState({\r\n        username: e.target.value,\r\n      });\r\n    } else if (e.target.type === \"password\") {\r\n      this.setState({\r\n        password: e.target.value,\r\n      });\r\n    }\r\n  }\r\n\r\n  async login() {\r\n    try {\r\n      const { password, username } = this.state;\r\n      const loginResponse = await axios.post(\r\n        \"http://emphasoft-test-assignment.herokuapp.com/api-token-auth/\",\r\n        {\r\n          username,\r\n          password,\r\n        }\r\n      );\r\n      if ((loginResponse.status = 200)) {\r\n        const token = loginResponse.data.token;\r\n        this.props.saveToken(token);\r\n        this.props.closeLogin()\r\n      }\r\n    } catch (e) {\r\n      this.setState({\r\n        isLoginFailed: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { isLoginFailed } = this.state;\r\n    const isErrLogin = isLoginFailed ? \"hidden\" : null;\r\n    return (\r\n      <div className=\"modal-window\">\r\n        <div className=\"modal-window__content container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-12\">\r\n              <header>Пожалуйста войдите в запись</header>\r\n            </div>\r\n            <div className=\"col-lg-12 modal-window__input\">\r\n              <label>Логин</label>\r\n              <input onChange={(e) => this.inputHandler(e)} type=\"text\"></input>\r\n            </div>\r\n            <div className=\"col-lg-12 modal-window__input\">\r\n              <label>Пароль</label>\r\n              <input\r\n                onChange={(e) => this.inputHandler(e)}\r\n                type=\"password\"\r\n              ></input>\r\n            </div>\r\n            <div className=\"col-lg-12 modal-window__input\">\r\n              <a onClick={() => this.login()} className=\"btn btn-success\">\r\n                Войти\r\n              </a>\r\n            </div>\r\n            <div className=\"col-lg-12 modal-window__login-failure\">\r\n              <p className={isErrLogin}>{`Неправильный логин или пароль.`}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginWindow;\r\n","import UsersTable from './users-table';\r\n\r\nexport default UsersTable;","import React, { Component } from \"react\";\r\nimport { Cell, Column, Table, HeaderCell } from \"rsuite-table\";\r\nimport \"rsuite-table/dist/css/rsuite-table.css\";\r\n\r\nclass UsersTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      sortColumn: \"id\",\r\n    };\r\n    this.handleSortColumn = this.handleSortColumn.bind(this);\r\n  }\r\n\r\n  getData() {\r\n    const { sortColumn, sortType } = this.state;\r\n    const { data } = this.props;\r\n\r\n    if (sortColumn && sortType) {\r\n      return data.sort((a, b) => {\r\n        let x = a[sortColumn];\r\n        let y = b[sortColumn];\r\n        if (typeof x === \"string\") {\r\n          x = x.charCodeAt();\r\n        }\r\n        if (typeof y === \"string\") {\r\n          y = y.charCodeAt();\r\n        }\r\n        if (sortType === \"asc\") {\r\n          return x - y;\r\n        } else {\r\n          return y - x;\r\n        }\r\n      });\r\n    }\r\n    return data;\r\n  }\r\n\r\n  handleSortColumn(sortColumn, sortType) {\r\n    this.setState({\r\n      loading: true,\r\n    });\r\n\r\n    setTimeout(() => {\r\n      console.log(sortColumn);\r\n      this.setState({\r\n        sortColumn,\r\n        sortType,\r\n        loading: false,\r\n      });\r\n    }, 500);\r\n  }\r\n  render() {\r\n    const formatData = this.getData().map((user) => {\r\n      const isActive = user.is_active ? \"В сети\" : \"Не в сети\";\r\n      const isSuperuser = user.is_superuser\r\n        ? \"Суперпользователь\"\r\n        : \"Пользователь\";\r\n      const lastLogin = user.last_login ? `${user.last_login.substr(0,10)}` : \"Неизвестно\"\r\n      const newUser = {\r\n        ...user,\r\n        is_active: isActive,\r\n        is_superuser: isSuperuser,\r\n        last_login: lastLogin\r\n      };\r\n      return newUser;\r\n    });\r\n    return (\r\n      <div>\r\n        <Table\r\n          height={800}\r\n          data={formatData}\r\n          sortColumn={this.state.sortColumn}\r\n          sortType={this.state.sortType}\r\n          onSortColumn={this.handleSortColumn}\r\n          loading={this.state.loading}\r\n          onRowClick={(data) => {}}\r\n          rowHeight={100}\r\n          wordWrap\r\n        >\r\n          <Column\r\n            verticalAlign=\"middle\"\r\n            width={80}\r\n            sortable\r\n            resizable\r\n            align=\"center\"\r\n          >\r\n            <HeaderCell>ID</HeaderCell>\r\n            <Cell dataKey=\"id\" />\r\n          </Column>\r\n\r\n          <Column\r\n            verticalAlign=\"middle\"\r\n            width={90}\r\n            sortable\r\n            resizable\r\n            align=\"center\"\r\n          >\r\n            <HeaderCell>Никнейм</HeaderCell>\r\n            <Cell dataKey=\"username\" />\r\n          </Column>\r\n\r\n          <Column\r\n            verticalAlign=\"middle\"\r\n            width={200}\r\n            sortable\r\n            resizable\r\n            align=\"center\"\r\n          >\r\n            <HeaderCell>Имя</HeaderCell>\r\n            <Cell dataKey=\"first_name\" />\r\n          </Column>\r\n\r\n          <Column\r\n            verticalAlign=\"middle\"\r\n            width={100}\r\n            sortable\r\n            resizable\r\n            align=\"center\"\r\n          >\r\n            <HeaderCell>Фамилия</HeaderCell>\r\n            <Cell dataKey=\"last_name\" />\r\n          </Column>\r\n\r\n          <Column\r\n            verticalAlign=\"middle\"\r\n            width={200}\r\n            sortable\r\n            resizable\r\n            align=\"center\"\r\n          >\r\n            <HeaderCell>В сети</HeaderCell>\r\n            <Cell dataKey=\"is_active\"></Cell>\r\n          </Column>\r\n\r\n          <Column verticalAlign=\"middle\" width={200} resizable align=\"center\">\r\n            <HeaderCell>Последний вход</HeaderCell>\r\n            <Cell dataKey=\"last_login\" />\r\n          </Column>\r\n\r\n          <Column verticalAlign=\"middle\" width={220} resizable align=\"center\">\r\n            <HeaderCell>Суперпользователь</HeaderCell>\r\n            <Cell dataKey=\"is_superuser\" />\r\n          </Column>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UsersTable;\r\n","import SearchPanel from './search-panel';\r\n\r\nexport default SearchPanel;","import React from \"react\";\r\nimport './search-panel.scss'\r\n\r\nclass SearchPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      search: \"\",\r\n    };\r\n  }\r\n\r\n  updateSearch(e) {\r\n    this.setState({ search: e.target.value.substr(0, 20) }, () =>\r\n      this.props.update(this.state.search)\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"search-container\">\r\n        <label className=\"search-label\" htmlFor=\"search-input\">\r\n          <h4>Поиск по никнейму</h4>\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.search}\r\n            id=\"search-input\"\r\n            placeholder=\"Начните вводить никнейм\"\r\n            onChange={(e) => this.updateSearch(e)}\r\n          />\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchPanel;\r\n","import App from './app';\r\n\r\nexport default App;","import React from \"react\";\r\nimport LoginWindow from \"../login-window\";\r\nimport Axios from \"axios\";\r\nimport UsersTable from \"../users-table\";\r\nimport SearchPanel from \"../search-panel\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      token: null,\r\n      loginEnd: false,\r\n      usersArray: [],\r\n      query: \"\",\r\n    };\r\n    this.updateSearchQuery = this.updateSearchQuery.bind(this);\r\n  }\r\n\r\n  saveToken(token) {\r\n    this.setState({\r\n      token,\r\n    });\r\n  }\r\n\r\n  closeLogin() {\r\n    this.setState({\r\n      loginEnd: true,\r\n    });\r\n    this.getDataFromAPI(this.state.token);\r\n  }\r\n\r\n  updateSearchQuery(query) {\r\n    this.setState((state) => {\r\n      return {\r\n        query,\r\n      };\r\n    });\r\n  }\r\n\r\n  async getDataFromAPI(token) {\r\n    const data = await Axios.get(\r\n      \"http://emphasoft-test-assignment.herokuapp.com/api/v1/users/\",\r\n      {\r\n        headers: {\r\n          Authorization: `Token ${token}`,\r\n        },\r\n      }\r\n    );\r\n    this.setState({\r\n      usersArray: data.data,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { query } = this.state;\r\n    const data = query\r\n      ? this.state.usersArray.filter(\r\n          (user) =>\r\n            user.username.toLowerCase().indexOf(query.toLowerCase()) !== -1\r\n        )\r\n      : this.state.usersArray;\r\n    return (\r\n      <div className=\"App container\">\r\n        {this.state.loginEnd ? (\r\n          <SearchPanel update={this.updateSearchQuery} />\r\n        ) : null}\r\n        {!this.state.loginEnd ? (\r\n          <LoginWindow\r\n            saveToken={this.saveToken.bind(this)}\r\n            closeLogin={this.closeLogin.bind(this)}\r\n          />\r\n        ) : null}\r\n        {this.state.loginEnd ? <UsersTable data={data} /> : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}